/*!
 * SimpleBar.js - Minimal version for dropdown scrollbars
 * Optimized for: vertical scrolling in dropdown menus
 * Original: https://grsmto.github.io/simplebar/
 */
(function (global, factory) {
  typeof exports === "object" && typeof module !== "undefined"
    ? (module.exports = factory())
    : typeof define === "function" && define.amd
    ? define(factory)
    : ((global = global || self), (global.SimpleBar = factory()));
})(this, function () {
  "use strict";

  // Core utilities
  function getElementWindow(element) {
    return element.ownerDocument.defaultView;
  }

  function getElementDocument(element) {
    return element.ownerDocument;
  }

  function isObject(obj) {
    return Object.prototype.toString.call(obj) === "[object Object]";
  }

  function addClasses(el, classes) {
    if (!classes) return;
    classes.split(" ").forEach(function (className) {
      if (className) el.classList.add(className);
    });
  }

  function removeClasses(el, classes) {
    if (!classes) return;
    classes.split(" ").forEach(function (className) {
      if (className) el.classList.remove(className);
    });
  }

  // SimpleBar class
  var SimpleBar = function SimpleBar(element, options) {
    this.el = element;
    this.options = Object.assign({}, SimpleBar.defaultOptions, options);
    this.classNames = Object.assign(
      {},
      SimpleBar.defaultOptions.classNames,
      this.options.classNames
    );

    if (!this.el || this.el.SimpleBar) return;

    this.el.SimpleBar = this;
    this.init();
  };

  // Default options
  SimpleBar.defaultOptions = {
    autoHide: true,
    forceVisible: false,
    clickOnTrack: true,
    classNames: {
      contentEl: "simplebar-content",
      contentWrapper: "simplebar-content-wrapper",
      offset: "simplebar-offset",
      mask: "simplebar-mask",
      wrapper: "simplebar-wrapper",
      placeholder: "simplebar-placeholder",
      scrollbar: "simplebar-scrollbar",
      track: "simplebar-track",
      heightAutoObserverWrapperEl: "simplebar-height-auto-observer-wrapper",
      heightAutoObserverEl: "simplebar-height-auto-observer",
      visible: "simplebar-visible",
      horizontal: "simplebar-horizontal",
      vertical: "simplebar-vertical",
      hover: "simplebar-hover",
      dragging: "simplebar-dragging",
    },
  };

  SimpleBar.prototype.init = function () {
    // Set up the DOM structure
    this.wrapperEl = this.el.querySelector("." + this.classNames.wrapper);
    this.contentWrapperEl = this.el.querySelector(
      "." + this.classNames.contentWrapper
    );
    this.offsetEl = this.el.querySelector("." + this.classNames.offset);
    this.maskEl = this.el.querySelector("." + this.classNames.mask);
    this.contentEl = this.el.querySelector("." + this.classNames.contentEl);
    this.placeholderEl = this.el.querySelector(
      "." + this.classNames.placeholder
    );

    if (!this.wrapperEl) {
      this.wrapperEl = document.createElement("div");
      this.contentWrapperEl = document.createElement("div");
      this.offsetEl = document.createElement("div");
      this.maskEl = document.createElement("div");
      this.contentEl = document.createElement("div");
      this.placeholderEl = document.createElement("div");

      addClasses(this.wrapperEl, this.classNames.wrapper);
      addClasses(this.contentWrapperEl, this.classNames.contentWrapper);
      addClasses(this.offsetEl, this.classNames.offset);
      addClasses(this.maskEl, this.classNames.mask);
      addClasses(this.contentEl, this.classNames.contentEl);
      addClasses(this.placeholderEl, this.classNames.placeholder);

      // Move original content
      while (this.el.firstChild) {
        this.contentEl.appendChild(this.el.firstChild);
      }

      // Build structure
      this.offsetEl.appendChild(this.contentEl);
      this.maskEl.appendChild(this.offsetEl);
      this.contentWrapperEl.appendChild(this.maskEl);
      this.wrapperEl.appendChild(this.contentWrapperEl);
      this.el.appendChild(this.wrapperEl);
      this.el.appendChild(this.placeholderEl);
    }

    // Create scrollbar
    this.scrollbarEl = document.createElement("div");
    this.trackEl = document.createElement("div");
    addClasses(
      this.scrollbarEl,
      this.classNames.scrollbar + " " + this.classNames.vertical
    );
    addClasses(this.trackEl, this.classNames.track);

    this.scrollbarEl.appendChild(this.trackEl);
    this.el.appendChild(this.scrollbarEl);

    // Set initial styles
    this.el.setAttribute("data-simplebar", "init");
    this.setupScrolling();
    this.addEventListeners();

    // Initial update
    this.recalculate();
  };

  SimpleBar.prototype.setupScrolling = function () {
    var self = this;

    // Enable scrolling on content wrapper
    this.contentWrapperEl.style.overflowY = "scroll";
    this.contentWrapperEl.style.overflowX = "hidden";

    // Hide native scrollbar
    var scrollbarWidth = this.getScrollbarWidth();
    this.contentWrapperEl.style.marginRight = "-" + scrollbarWidth + "px";
  };

  SimpleBar.prototype.getScrollbarWidth = function () {
    var scrollDiv = document.createElement("div");
    scrollDiv.style.width = "100px";
    scrollDiv.style.height = "100px";
    scrollDiv.style.overflow = "scroll";
    scrollDiv.style.position = "absolute";
    scrollDiv.style.top = "-9999px";
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  };

  SimpleBar.prototype.addEventListeners = function () {
    var self = this;

    // Listen to scroll events
    this.contentWrapperEl.addEventListener("scroll", function () {
      self.updateScrollbar();
    });

    // Auto-hide functionality
    if (this.options.autoHide) {
      this.el.addEventListener("mouseenter", function () {
        addClasses(self.scrollbarEl, self.classNames.visible);
      });

      this.el.addEventListener("mouseleave", function () {
        removeClasses(self.scrollbarEl, self.classNames.visible);
      });
    } else {
      addClasses(this.scrollbarEl, this.classNames.visible);
    }

    // Track click functionality
    if (this.options.clickOnTrack) {
      this.trackEl.addEventListener("click", function (e) {
        var rect = self.trackEl.getBoundingClientRect();
        var percentage = (e.clientY - rect.top) / rect.height;
        var scrollTop =
          percentage *
          (self.contentEl.scrollHeight - self.contentWrapperEl.clientHeight);
        self.contentWrapperEl.scrollTop = scrollTop;
      });
    }
  };

  SimpleBar.prototype.updateScrollbar = function () {
    var contentHeight = this.contentEl.scrollHeight;
    var containerHeight = this.contentWrapperEl.clientHeight;
    var scrollTop = this.contentWrapperEl.scrollTop;

    if (contentHeight <= containerHeight) {
      this.scrollbarEl.style.display = "none";
      return;
    }

    this.scrollbarEl.style.display = "block";

    var scrollbarHeight = Math.max(
      (containerHeight / contentHeight) * containerHeight,
      20
    );
    var scrollbarTop =
      (scrollTop / (contentHeight - containerHeight)) *
      (containerHeight - scrollbarHeight);

    this.trackEl.style.height = scrollbarHeight + "px";
    this.trackEl.style.transform = "translateY(" + scrollbarTop + "px)";
  };

  SimpleBar.prototype.recalculate = function () {
    this.updateScrollbar();
  };

  SimpleBar.prototype.unMount = function () {
    this.el.SimpleBar = null;
    if (this.scrollbarEl) {
      this.scrollbarEl.remove();
    }
  };

  // Auto-initialize elements with data-simplebar attribute
  if (typeof document !== "undefined") {
    document.addEventListener("DOMContentLoaded", function () {
      var elements = document.querySelectorAll("[data-simplebar]");
      elements.forEach(function (element) {
        if (!element.SimpleBar) {
          new SimpleBar(element);
        }
      });
    });
  }

  return SimpleBar;
});
